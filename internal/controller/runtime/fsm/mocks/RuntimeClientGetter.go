// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	client "sigs.k8s.io/controller-runtime/pkg/client"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/kyma-project/infrastructure-manager/api/v1"
)

// RuntimeClientGetter is an autogenerated mock type for the RuntimeClientGetter type
type RuntimeClientGetter struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, runtime
func (_m *RuntimeClientGetter) Get(ctx context.Context, runtime v1.Runtime) (client.Client, error) {
	ret := _m.Called(ctx, runtime)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 client.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.Runtime) (client.Client, error)); ok {
		return rf(ctx, runtime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1.Runtime) client.Client); ok {
		r0 = rf(ctx, runtime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1.Runtime) error); ok {
		r1 = rf(ctx, runtime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRuntimeClientGetter creates a new instance of RuntimeClientGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRuntimeClientGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *RuntimeClientGetter {
	mock := &RuntimeClientGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
